//
//  ApolloManager.swift
//  GitStargazers
//
//  Created by YLAPP on 19/01/2019.
//  Copyright Â© 2019 YLAPP. All rights reserved.
//

import Foundation
import Apollo
/**
 GraphQL Manager used to fetch data from Github's graph.
 
 - use a static instance of Apollo Client.
 - Apollo Client use GraphQLQuery object to fetch data from db
 - Apollo framework generate API from .graphql files and schema.json generated ad-hoc for graphql endpoint by Apollo-codegen
 - Api are generated by a Run Script during thr build phases of the project
 */

class ApolloManager: NSObject {
    
    static let configuration = URLSessionConfiguration.default
    static let dispatchQueue = DispatchQueue(label: Constants.dispatchQueueLabel.fetchRepositoryQueue)
    
    ///static instance of ApolloCliente
    static let apollo: ApolloClient? = {
        /// Add additional headers as needed
        configuration.httpAdditionalHeaders = ["Authorization": Constants.urlConstant.access_token] // Replace `<token>`
        if let url = URL(string: Constants.urlConstant.urlGraph)
        {
            return ApolloClient(networkTransport: HTTPNetworkTransport(url: url, configuration: configuration))
        }else{
            return nil
        }
        
    }()
    ///used for next fetching
    static var lastRequestCursor:String?
    /**
     
     Fetch from Github first time.
     
     Is separate from other fetching operation because the needs of a cursor of edges, then will be used nextStargazers method
     so for this query is used (first:50) query parameter for next will be used (after: $last,first: 50) query parameter.
     
     - parameter
     - parameter errorHandler: If Apollo Framework returns any error will be created one NSError with message info
     - parameter completion: If fetch data send to caller a collection of RepoStargazer objects.
     
     GraphQl RepositorySchemeQuery is one autogenerated object by Apollo Framework since .graphql file and schema.json (this time based on Github)
     - this Script is situated in BuildPhases RunScript and Generates all the GraphQl Api.
     
     */
    static func selectRepositoryBy(name:String?,owner:String?,completion:@escaping ([RepoStargazer?])-> Void,errorHandler:@escaping ((NSError)->())){
        
        //FIXME: To implement ErrorManager
        apollo?.fetch(query: RepositorySchemeQuery(name: name, owner:owner), cachePolicy: CachePolicy.fetchIgnoringCacheData, queue: dispatchQueue, resultHandler: { (result, error)  in
            guard  error == nil else{
                if let error:GraphQLError = error as? GraphQLError{
                    //               ErrorManager
                    let errorTemp = NSError(domain: error.message ?? LocalizableStruct.Error.repositoryNotFound, code: 0, userInfo: nil)
                    errorHandler(errorTemp)
                }
                return
            }
            if let data = result?.data, let nodes = data.repository?.stargazers.nodes,let cursor = data.repository?.stargazers.edges?.last??.cursor
            {
                
                let converted = convertDataModel(from:nodes)
                self.lastRequestCursor = cursor
                
                completion(converted)
            }
            else if let error = result?.errors
            {
                errorHandler(NSError(domain: error.first?.message ?? LocalizableStruct.Error.repositoryNotFound, code: 0, userInfo: ["title":LocalizableStruct.Error.repositoryNotFound]))
            }else if result?.data?.repository?.stargazers.totalCount == DataManager.shared.stargazers.count
            {
                errorHandler(NSError(domain:LocalizableStruct.Error.endStargazers, code: 0, userInfo: ["title":"Stop searching"]))
            }
        }
        )
        
    }
    /**
     Fetch from Github starting from a cursor
     
     - Parameter completion: send to caller results of fetching from GraphQl by ApolloFramework
     - Parameter errorHandler: If Apollo Framework returns any error will be created one NSError with message info and sended to caller error handler
     
     Fetch next 50 (STUBBED) stargazers of the given repository
     
     */
    
    static func nextStargazers(completion:@escaping ([RepoStargazer?])-> Void,errorHandler:@escaping ((NSError)->())){
        if let name = DataManager.shared.repository, let owner = DataManager.shared.owner, let last = self.lastRequestCursor
        {
            apollo?.fetch(query: RepositorySchemeAfterQuery.init(name: name, owner: owner, last: last), cachePolicy: CachePolicy.returnCacheDataAndFetch, queue: dispatchQueue, resultHandler: { (result, error) in
                guard  error == nil else{
                    if let error:GraphQLError = error as? GraphQLError{
                        let errorTemp = NSError(domain: error.message ?? LocalizableStruct.Error.repositoryNotFound, code: 0, userInfo: nil)
                        errorHandler(errorTemp)
                    }
                    return
                }
                if let data = result?.data, let nodes = data.repository?.stargazers.nodes,let cursor = data.repository?.stargazers.edges?.last??.cursor
                {
                    let converted = convertDataModel(from:nodes)
                    self.lastRequestCursor = cursor
                  
                    completion(converted)
                }
                else if let error = result?.errors
                {
                    errorHandler(NSError(domain: error.first?.message ?? LocalizableStruct.Error.repositoryNotFound, code: 0, userInfo: nil))
                }
            })
        }
    }
    /**
     Used to empty apollo client cache
     
     */
    static func emptyCache()
    {
        _ = apollo?.clearCache()
    }
    
    //TODO: IMPLEMENT CODABLE VERSION of github api
    /**
     Adapt datamodel from RepositorySchemeQuery to RepoStargazer(first time query)
     
     - Parameter from: Array of lGithub's GrapghQl Node object that contains Stargazers' info based on RepositorySchemeQuery
     - Returns: Codable Array of RepoStargazers
     */
    static func convertDataModel(from:[RepositorySchemeQuery.Data.Repository.Stargazer.Node?])->[RepoStargazer]{
        var res:[RepoStargazer] = []
        for d in from{
            let appo = RepoStargazer(name: d?.name, urlAvatar: d?.avatarUrl, bio: d?.bio,id:d?.id)
            res.append(appo)
        }
        return res
    }
    /*
     *  Adapt datamodel from RepositorySchemeAfterQuery to RepoStargazer
     *
     */
    static func convertDataModel(from:[RepositorySchemeAfterQuery.Data.Repository.Stargazer.Node?])->[RepoStargazer]{
        var res:[RepoStargazer] = []
        for d in from{
            let appo = RepoStargazer(name: d?.name, urlAvatar: d?.avatarUrl, bio: d?.bio,id:d?.id)
            res.append(appo)
        }
        return res
    }
}
